service: product-service
frameworkVersion: '2'

plugins:
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1

  iamRoleStatements:
    - Effect: "Allow"
      Action: "sqs:*"
      Resource: 
        - Fn::GetAtt: [ SQSQueue, Arn ]
    - Effect: "Allow"
      Action: "sns:*"
      Resource: 
        Ref: SNSTopic
    
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    SQS_URL:
      Ref: SQSQueue
    SNS_TOPIC:
      Ref: SNSTopic

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalog-products-queue
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: catalog-products-sns-topic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: matthew.risedale@gmail.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic
  Outputs:
    SQSQueueUrl:
      Value:
        Ref: SQSQueue
    SQSQueueArn:
      Value:
        Fn::GetAtt: [ SQSQueue, Arn ]

functions:
  initDb:
    handler: handler.initDb

  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true

  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                productId: true

  postNewProduct:
    handler: handler.createNewProduct
    events:
      - http:
          path: products
          method: post 
          cors: true

  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt: [ SQSQueue, Arn ]